}
PVAL <- pairwise.table(compare.levels, levels(g), p.adjust.method)
TVAL <- pairwise.table.t(compare.levels.t, levels(g), p.adjust.method)
if (pool.sd)
DF <- total.degf
else
DF <- pairwise.table.t(compare.levels.df, levels(g), p.adjust.method)
ans <- list(method = METHOD, data.name = DNAME, p.value = PVAL,
p.adjust.method = p.adjust.method, t.value = TVAL, dfs = DF)
class(ans) <- "pairwise.htest"
ans
}
pairwise.table.t <- function (compare.levels.t, level.names, p.adjust.method)
{
ix <- setNames(seq_along(level.names), level.names)
pp <- outer(ix[-1L], ix[-length(ix)], function(ivec, jvec) sapply(seq_along(ivec),
function(k) {
i <- ivec[k]
j <- jvec[k]
if (i > j)
compare.levels.t(i, j)
else NA
}))
pp[lower.tri(pp, TRUE)] <- pp[lower.tri(pp, TRUE)]
pp
}
points = as.numeric(ona_multimodal_tif_set$points$SVD1)
df_set <- as.data.frame(points) %>%
mutate(phaseid = ona_multimodal_tif_set$points$phaseid) %>%
mutate(units = ona_multimodal_tif_set$points$ENA_UNIT) %>%
mutate(units = str_sub(units, start = 1, end = -2)) %>%
filter(phaseid != 5)
df_1 <- df_set %>%
filter(phaseid == 1)
df_2 <- df_set %>%
filter(phaseid == 2)
df_3 <- df_set %>%
filter(phaseid == 3)
df_4 <- df_set %>%
filter(phaseid == 4)
guys_4 <- pull(df_4, units)
df_1 <- df_1 %>%
filter(units %in% guys_4)
df_2 <- df_1 %>%
filter(units %in% guys_4)
df_3 <- df_1 %>%
filter(units %in% guys_4)
df_set <- rbind(df_1, df_2, df_3, df_4)
# pairwise <- pairwise.t.test.with.t.and.df(ona_multimodal_tif_set$points$SVD1, ona_multimodal_tif_set$points$phaseid, p.adjust.method = "BH")
# print(pairwise)
# print(pairwise$t.value)
# print(pairwise$dfs)
pairwise <- pairwise.t.test.with.t.and.df(df_set$points, df_set$phaseid, paired = TRUE, p.adjust.method = "BH")
t.test(df_1$points, df_2$phaseid, paired = TRUE)
t.test(df_2$points, df_3$phaseid, paired = TRUE)
t.test(df_3$points, df_4$phaseid, paired = TRUE)
t.test(df_1$points, df_2$points, paired = TRUE)
t.test(df_2$points, df_3$points, paired = TRUE)
t.test(df_3$points, df_4$points, paired = TRUE)
nrow(df_1$points)
df_1$points
df_2$points
df_3 <- df_3 %>%
filter(units %in% guys_4)
# pairwise <- pairwise.t.test(ona_multimodal_tif_set$points$SVD1, ona_multimodal_tif_set$points$phaseid, p.adjust.method = "BH")
# print(pairwise)
pairwise.t.test.with.t.and.df <- function (x, g, p.adjust.method = p.adjust.methods, pool.sd = !paired,
paired = FALSE, alternative = c("two.sided", "less", "greater"),
...)
{
if (paired & pool.sd)
stop("pooling of SD is incompatible with paired tests")
DNAME <- paste(deparse(substitute(x)), "and", deparse(substitute(g)))
g <- factor(g)
p.adjust.method <- match.arg(p.adjust.method)
alternative <- match.arg(alternative)
if (pool.sd) {
METHOD <- "t tests with pooled SD"
xbar <- tapply(x, g, mean, na.rm = TRUE)
s <- tapply(x, g, sd, na.rm = TRUE)
n <- tapply(!is.na(x), g, sum)
degf <- n - 1
total.degf <- sum(degf)
pooled.sd <- sqrt(sum(s^2 * degf)/total.degf)
compare.levels <- function(i, j) {
dif <- xbar[i] - xbar[j]
se.dif <- pooled.sd * sqrt(1/n[i] + 1/n[j])
t.val <- dif/se.dif
if (alternative == "two.sided")
2 * pt(-abs(t.val), total.degf)
else pt(t.val, total.degf, lower.tail = (alternative ==
"less"))
}
compare.levels.t <- function(i, j) {
dif <- xbar[i] - xbar[j]
se.dif <- pooled.sd * sqrt(1/n[i] + 1/n[j])
t.val = dif/se.dif
t.val
}
}
else {
METHOD <- if (paired)
"paired t tests"
else "t tests with non-pooled SD"
compare.levels <- function(i, j) {
xi <- x[as.integer(g) == i]
xj <- x[as.integer(g) == j]
t.test(xi, xj, paired = paired, alternative = alternative,
...)$p.value
}
compare.levels.t <- function(i, j) {
xi <- x[as.integer(g) == i]
xj <- x[as.integer(g) == j]
t.test(xi, xj, paired = paired, alternative = alternative,
...)$statistic
}
compare.levels.df <- function(i, j) {
xi <- x[as.integer(g) == i]
xj <- x[as.integer(g) == j]
t.test(xi, xj, paired = paired, alternative = alternative,
...)$parameter
}
}
PVAL <- pairwise.table(compare.levels, levels(g), p.adjust.method)
TVAL <- pairwise.table.t(compare.levels.t, levels(g), p.adjust.method)
if (pool.sd)
DF <- total.degf
else
DF <- pairwise.table.t(compare.levels.df, levels(g), p.adjust.method)
ans <- list(method = METHOD, data.name = DNAME, p.value = PVAL,
p.adjust.method = p.adjust.method, t.value = TVAL, dfs = DF)
class(ans) <- "pairwise.htest"
ans
}
pairwise.table.t <- function (compare.levels.t, level.names, p.adjust.method)
{
ix <- setNames(seq_along(level.names), level.names)
pp <- outer(ix[-1L], ix[-length(ix)], function(ivec, jvec) sapply(seq_along(ivec),
function(k) {
i <- ivec[k]
j <- jvec[k]
if (i > j)
compare.levels.t(i, j)
else NA
}))
pp[lower.tri(pp, TRUE)] <- pp[lower.tri(pp, TRUE)]
pp
}
points = as.numeric(ona_multimodal_tif_set$points$SVD1)
df_set <- as.data.frame(points) %>%
mutate(phaseid = ona_multimodal_tif_set$points$phaseid) %>%
mutate(units = ona_multimodal_tif_set$points$ENA_UNIT) %>%
mutate(units = str_sub(units, start = 1, end = -2)) %>%
filter(phaseid != 5)
df_1 <- df_set %>%
filter(phaseid == 1)
df_2 <- df_set %>%
filter(phaseid == 2)
df_3 <- df_set %>%
filter(phaseid == 3)
df_4 <- df_set %>%
filter(phaseid == 4)
guys_4 <- pull(df_4, units)
df_1 <- df_1 %>%
filter(units %in% guys_4)
df_2 <- df_2 %>%
filter(units %in% guys_4)
df_3 <- df_3 %>%
filter(units %in% guys_4)
df_set <- rbind(df_1, df_2, df_3, df_4)
# pairwise <- pairwise.t.test.with.t.and.df(ona_multimodal_tif_set$points$SVD1, ona_multimodal_tif_set$points$phaseid, p.adjust.method = "BH")
# print(pairwise)
# print(pairwise$t.value)
# print(pairwise$dfs)
# pairwise <- pairwise.t.test.with.t.and.df(df_set$points, df_set$phaseid, paired = TRUE, p.adjust.method = "BH")
# print(pairwise)
# print(pairwise$t.value)
# print(pairwise$dfs)
t.test(df_1$points, df_2$points, paired = TRUE)
t.test(df_2$points, df_3$points, paired = TRUE)
t.test(df_3$points, df_4$points, paired = TRUE)
library(rENA)
library(magrittr)
library(scales)
setwd("~/Desktop/epistemic_analytics/hui_QE_institute")
df <- read.csv("./datasets/reformatted_hui_data.csv") %>%
select(-X)
units = df[, c("students", "week", "commitment_level")]
conversations = df[, c("students", "week", "commitment_level")]
code_cols = c(
"Task.done.on.time.1", "Task.done.on.time.2", "Work.accepted.by.others.1", "Work.accepted.by.others.2", "Positive.tone.1",     "Positive.tone.2", "Initiate.conversations.1",  "Initiate.conversations.2",  "Help.others.1", "Help.others.2",                 "Completes.more.tasks.1", "Completes.more.tasks.2", "Assigns.tasks.1", "Assigns.tasks.2", "Review.work.from.others.1",         "Review.work.from.others.2", "Initiate.meeting.1", "Initiate.meeting.2"
)
codes = df[, code_cols]
# Arbitrary window size of 4 chosen
accum = ena.accumulate.data(
units = units,
conversation = conversations,
codes = codes,
window.size.back = 4
)
library(rENA)
library(magrittr)
library(scales)
setwd("~/Desktop/epistemic_analytics/hui_QE_institute")
df <- read.csv("./datasets/reformatted_hui_data.csv") %>%
select(-X)
units = df[, c("students", "week", "commitment_level")]
conversations = df[, c("students", "week", "commitment_level")]
code_cols = c(
"Task.done.on.time.1", "Task.done.on.time.2", "Work.accepted.by.others.1", "Work.accepted.by.others.2", "Positive.tone.1",     "Positive.tone.2", "Initiate.conversations.1",  "Initiate.conversations.2",  "Help.others.1", "Help.others.2",                 "Completes.more.tasks.1", "Completes.more.tasks.2", "Assigns.tasks.1", "Assigns.tasks.2", "Review.work.from.others.1",         "Review.work.from.others.2", "Initiate.meeting.1", "Initiate.meeting.2"
)
codes = df[, code_cols]
# Arbitrary window size of 4 chosen
accum = ena.accumulate.data(
units = units,
conversation = conversations,
codes = codes,
window.size.back = 4
)
set = ena.make.set(
enadata = accum
)
low_points = as.matrix(set$points$commitment_level$low)
mid_points = as.matrix(set$points$commitment_level$mid)
high_points = as.matrix(set$points$commitment_level$high)
points_max = max(low_points, mid_points, high_points)
# low_points_scaled = scales::rescale(low_points,
#                                     c(0,max(as.matrix(set$rotation$nodes))), c(0,points_max))
# mid_points_scaled = scales::rescale(mid_points,
#                                      c(0,max(as.matrix(set$rotation$nodes))), c(0,points_max))
# high_points_scaled = scales::rescale(high_points,
#                                      c(0,max(as.matrix(set$rotation$nodes))), c(0,points_max))
low_lw = as.matrix(set$line.weights$commitment_level$low)
low_mean = as.vector(colMeans(low_lw))
mid_lw = as.matrix(set$line.weights$commitment_level$mid)
mid_mean = as.vector(colMeans(mid_lw))
high_lw = as.matrix(set$line.weights$commitment_level$high)
high_mean = as.vector(colMeans(high_lw))
plot_low = ena.plot(set, title = "Mean Low Network", font.family = "Times") %>%
ena.plot.points(points = low_points, colors = c("red")) %>%
ena.plot.group(points = low_points, colors =c("red"),
confidence.interval = "box") %>%
ena.plot.network(network = low_mean)
plot_low$plot
plot = ena.plot(set, scale.to = list(x=-1:1, y=-1:1), title = "Groups and Means")
plot = ena.plot.points(plot, points = low_points,
confidence.interval = "box", colors = c("red"))
plot = ena.plot.points(plot, points = high_points,
confidence.interval = "box", colors = c("blue"))
plot = ena.plot.group(plot, point = low_points,
colors =c("red"), confidence.interval = "box")
plot = ena.plot.group(plot, point = high_points,
colors =c("blue"), confidence.interval = "box")
plot$plot
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/Monash_collab/code/ona_plotter_lyon.R")
df <- read.csv("./data/LetsPlay_TMA_1stmodel.csv")
setwd("~/Desktop/epistemic_analytics/lyon_collab")
df <- read.csv("./data/LetsPlay_TMA_1stmodel.csv")
df <- read.csv("~/Desktop/epistemic_analytics/data/LetsPlay_TMA_1stmodel.csv")
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv")
View(df)
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
colnames(df)
colnames(df)[9:21]
unique(df["modality"])
unique(df[, "modality"])
unique(df[, "Modality"])
View(df)
View(df)
# Set local working directory
# setwd("~/Desktop/epistemic_analytics/lyon_collab")
# knitr::opts_knit$set(root.dir = '~/Documents/GitHub/lyon_collab')
# Reinstallation sequence for ONA package
# remove.packages("ona")
# install.packages("ona", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/ona/cran/", "https://cran.rstudio.org"))
# remove.packages("tma")
# install.packages("tma", repos = c("https://epistemic-analytics.gitlab.io/qe-packages/tma/cran/", "https://cran.rstudio.org"))
# Load necessary libraries
library(rENA)
library(ona)
library(tma)
library(readxl)
library(tidyverse)
# Source plotter code
# source("~/Desktop/epistemic_analytics/lyon_collab/code/ona_plotter_lyon.R")
# Read in dataset, remove unnecessary columns
df <- read.csv("~/Desktop/epistemic_analytics/lyon_collab/data/LetsPlay_TMA_1stmodel.csv") %>%
select(-X)
# Define units, codes, metadata, and HOO rules
unit_cols <- c("classroom", "group", "actor")
code_cols <- colnames(df)[9:21]
meta_cols <- c("qualitative_content", "Rules")
HOO_rules_model <- tma::rules(
classroom %in% UNIT$classroom & group %in% UNIT$group
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$end_time - FULL_CONTEXT[ROWS]$start_time +20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$end_time - FULL_CONTEXT[ROWS]$start_time +20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$end_time - FULL_CONTEXT[ROWS]$start_time +10))*1
else
return(0)
},
time.column = "start_time",
return.ena.set = FALSE,
mode.column = "modality"
)
View(df)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "modality"
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start +10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
# return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
return(x<=20)*1
if(mod == "gesture")
# return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
return(x<=20)*1
if(mod == "gaze")
#return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
return(x<=10)*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
colnames(df)[9:21]
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
# Define accumulation function
ona_multimodal_tif_accum <- tma:::accumulate_contexts (
x = context_model,
codes = code_cols,
weight.by = function(x) { x },
# Define the decay function to account differently for verbal, gaze, and gesture, arbitrary values selected
decay.function = function(x) {
mod <- FULL_CONTEXT[RESPONSE_INDEX, ]$Modality
if(mod == "verbal")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gesture")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 20))*1
if(mod == "gaze")
return(x<(FULL_CONTEXT[ROWS]$End - FULL_CONTEXT[ROWS]$Start + 10))*1
else
return(0)
},
time.column = "Start",
return.ena.set = FALSE,
mode.column = "Modality"
)
View(df)
